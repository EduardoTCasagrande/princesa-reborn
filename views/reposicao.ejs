<!DOCTYPE html>
<html lang="pt-BR" class="transition-colors duration-300">
<head>
  <meta charset="UTF-8" />
  <title>Princesa Reborn - Reposi√ß√£o</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class'
    }
  </script>
</head>

<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex flex-col min-h-screen font-sans transition-colors duration-300">

  <%- include('partials/header') %>

  <main class="flex-grow container mx-auto p-6">
    <div class="flex flex-col md:flex-row md:space-x-6 space-y-6 md:space-y-0">

      <!-- Box esquerda -->
      <div class="bg-white dark:bg-gray-800/90 backdrop-blur rounded-2xl shadow p-6 flex-1 transition-colors">
        <h1 class="text-2xl font-semibold mb-4">Reposi√ß√£o</h1>

        <label for="quiosqueSelect" class="block font-medium mb-1">Selecione o quiosque:</label>

        <!-- input hidden FORA do select -->
        <input type="hidden" id="quiosqueIdHidden" value="<%= user.quiosque %>">

        <select
          id="quiosqueSelect"
          class="w-full border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded px-3 py-2 mb-4 transition"
          <%= (user.admin || user.nivel === 'repositor') ? '' : 'disabled hidden' %>
        >
          <% if (!(user.admin || user.nivel === 'repositor')) { %>
            <option value="<%= user.quiosque %>" selected><%= user.quiosque %></option>
          <% } else { %>
            <option value="">-- Escolha um quiosque --</option>
          <% } %>
        </select>

        <label for="inputSKU" class="block font-medium mb-1">Bipagem Manual:</label>
        <input
          type="text"
          id="inputSKU"
          placeholder="Escaneie com o bipador"
          autofocus
          class="w-full border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded px-3 py-2 mb-4 transition"
        />

        <div class="mb-4 text-center text-gray-700 dark:text-gray-300" id="mensagem">Selecione um quiosque para come√ßar.</div>

        <label for="separadorInput" class="block font-medium mb-1">Quem separou:</label>
        <input
          type="text"
          id="separadorInput"
          placeholder="Nome do separador"
          class="w-full border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded px-3 py-2 mb-6 transition"
        />

        <button
          onclick="enviarRelatorio()"
          class="w-full bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-400 text-white font-semibold py-2 rounded-lg transition"
        >
          üì§ Finalizar Reposi√ß√£o
        </button>
      </div>

      <!-- Box direita -->
      <div class="bg-white dark:bg-gray-800/90 backdrop-blur rounded-2xl shadow p-6 flex-1 flex flex-col transition-colors">
        <div id="cabecalho" class="mb-4 font-semibold text-lg"></div>
        <div id="resumo" class="flex-grow overflow-auto text-gray-800 dark:text-gray-200 text-sm"></div>

        <audio id="beep-sound" src="/certo.mp3" preload="auto"></audio>
        <audio id="erro-sound" src="/errado.mp3" preload="auto"></audio>
      </div>

    </div>
  </main>
  <%- include('partials/whatsapp') %>

  <%- include('partials/footer') %>

<script>
  const beepSound = document.getElementById("beep-sound");
  const erroSound = document.getElementById("erro-sound");
  let leituraHabilitada = false;
  let dadosPlanejados = {};
  let contagemAtual = {};
  let skusValidos = [];

  async function carregarSkusValidos() {
    try {
      const res = await fetch('/api/precos');
      if (!res.ok) throw new Error('Erro ao carregar SKUs v√°lidos');
      const precos = await res.json();
      skusValidos = precos.map(p => p.sku.toLowerCase());
    } catch (err) {
      console.error(err);
      alert('Erro ao carregar lista de SKUs v√°lidos.');
    }
  }

  async function carregarQuiosqueDaSessao() {
    try {
      const res = await fetch('/session-user');
      const user = await res.json();

      if (!user || !user.username) {
        alert("Sess√£o expirada. Fa√ßa login novamente.");
        return window.location.href = "/login";
      }

      const select = document.getElementById("quiosqueSelect");

      if (user.admin || user.nivel === 'repositor') {
        select.disabled = false;
        select.hidden = false;
        select.innerHTML = '<option value="">-- Escolha um quiosque --</option>';

        const resQuiosques = await fetch('/quiosques');
        const data = await resQuiosques.json();

        data.quiosques.forEach(q => {
          const option = document.createElement("option");
          option.value = q;
          option.textContent = q;
          select.appendChild(option);
        });

        select.addEventListener('change', () => {
          if (select.value) carregarReposicao(select.value);
        });

      } else {
        select.disabled = true;
        select.hidden = true;
        select.innerHTML = `<option value="${user.quiosque}" selected>${user.quiosque}</option>`;
        await carregarReposicao(user.quiosque);
      }
    } catch (err) {
      console.error("Erro ao carregar usu√°rio da sess√£o:", err);
    }
  }

  async function carregarReposicao(quiosque) {
    if (!quiosque) return;

    try {
      const res = await fetch(`/reposicao/banco/${encodeURIComponent(quiosque)}`);
      if (!res.ok) throw new Error('Erro ao carregar reposi√ß√£o do banco');
      const data = await res.json();

      const dados = {};
      Object.entries(data.dados || {}).forEach(([sku, qtd]) => {
        dados[sku.trim().toLowerCase()] = qtd;
      });

      dadosPlanejados = dados;
      contagemAtual = {};
      leituraHabilitada = true;

      document.getElementById("mensagem").innerText = "Reposi√ß√£o carregada do banco. Escaneie um produto.";
      document.getElementById("cabecalho").innerText = `Status: ${(data.status || 'desconhecido').toUpperCase()}`;
      atualizarResumo();

    } catch (err) {
      console.error(err);
      document.getElementById("mensagem").innerText = "Erro ao carregar reposi√ß√£o.";
    }
  }

function atualizarResumo() {
  const resumoDiv = document.getElementById("resumo");
  let resumoHTML = "<h3 class='font-semibold mb-2'>Status da Reposi√ß√£o:</h3><ul class='list-disc list-inside'>";

  const todosSkus = new Set([
    ...Object.keys(dadosPlanejados),
    ...Object.keys(contagemAtual)
  ]);

  // Cria lista s√≥ dos SKUs que est√£o errados (faltando ou a mais)
  const skusFiltrados = [...todosSkus].filter(sku => {
    const planejado = (dadosPlanejados[sku] || 0);
    const bipadoUnidades = (contagemAtual[sku] || 0);
    return planejado !== bipadoUnidades;  // s√≥ retorna true se houver diferen√ßa
  });

  if (skusFiltrados.length === 0) {
    resumoHTML += "<li>Todos os itens conferem corretamente.</li>";
  } else {
    skusFiltrados.forEach(sku => {
      const planejado = (dadosPlanejados[sku] || 0);
      const bipadoUnidades = (contagemAtual[sku] || 0);
      const diferenca = bipadoUnidades - planejado;

      let statusTexto = '';
      let emoji = '';

      if (diferenca === 0) {
        statusTexto = "‚úì Correto";
        emoji = "‚úÖ";
      } else if (diferenca > 0) {
        statusTexto = `‚ñ≤ A mais (${diferenca})`;
        emoji = "‚ö†Ô∏è";
      } else {
        statusTexto = `‚ùå Faltando (${Math.abs(diferenca)})`;
        emoji = "‚ùå";
      }

      resumoHTML += `<li><strong>${sku}</strong>: ${bipadoUnidades}/${planejado} - ${emoji} ${statusTexto}</li>`;
    });
  }

  resumoHTML += "</ul>";
  resumoDiv.innerHTML = resumoHTML;
}


  document.getElementById("inputSKU").addEventListener("keypress", async function (e) {
    if (e.key === "Enter" && leituraHabilitada) {
      const input = e.target;
      const skuRaw = input.value.trim();
      const sku = skuRaw.toLowerCase();
      const select = document.getElementById("quiosqueSelect");
      const quiosque = select.value || select.options[0]?.value;

      input.disabled = true;  // previne m√∫ltiplos envios
      input.value = "";

      if (!skusValidos.includes(sku)) {
        erroSound.play();
        document.getElementById("mensagem").innerText = `‚ùå SKU '${sku}' n√£o est√° na lista v√°lida de pre√ßos.`;
        document.getElementById("mensagem").className = 'text-red-600 text-center font-semibold';
        input.disabled = false;
        return;
      }

      try {
        const res = await fetch('/reposicao/bipar', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sku, quiosque })
        });

        const data = await res.json();

        if (data.status === 'ok' && data.atual && data.atual[sku] !== undefined) {
          const skuKey = sku;
          const totalBipado = data.atual[sku];
          const planejado = dadosPlanejados[skuKey] || 0;

          contagemAtual[skuKey] = totalBipado >= 0 ? totalBipado : 0;
          beepSound.play();

          // Atualiza visual do resumo e tabela
          atualizarResumo();
        } else {
          erroSound.play();
        }


        document.getElementById("mensagem").innerText = data.mensagem;
        document.getElementById("mensagem").className = data.status === 'ok' ? 'ok' : 'erro';

      } catch (err) {
        console.error(err);
        document.getElementById("mensagem").innerText = "Erro ao processar bipagem.";
        erroSound.play();
      } finally {
        input.disabled = false;
        input.focus();
      }
    }
  });

  async function enviarRelatorio() {
    const separador = document.getElementById("separadorInput").value.trim();
    const select = document.getElementById("quiosqueSelect");
    const quiosque = select.value || select.options[0]?.value;

    if (!separador || !quiosque) {
      alert("Preencha o separador e selecione o quiosque.");
      return;
    }

    try {
      const tipo = 'reposicao';

      const res = await fetch('/relatorios/salvar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ dados: { planejado: dadosPlanejados, bipado: contagemAtual }, separador, quiosque, tipo })
      });

      const data = await res.json();
      alert(data.mensagem || "Relat√≥rio enviado com sucesso.");

      const finalizar = await fetch('/reposicao/finalizar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quiosque })
      });

      const resultado = await finalizar.json();

      if (!finalizar.ok) {
        console.error("Erro ao finalizar:", resultado);
        alert("Erro ao finalizar reposi√ß√£o: " + (resultado.mensagem || 'Erro desconhecido'));
        return;
      }

      dadosPlanejados = {};
      contagemAtual = {};
      atualizarResumo();

    } catch (err) {
      console.error(err);
      alert("Erro ao enviar relat√≥rio ou finalizar reposi√ß√£o.");
    }
  }

  window.onload = async () => {
    await carregarSkusValidos();
    await carregarQuiosqueDaSessao();
  };
</script>

<script src="/js/darkmode.js"></script>

</body>
</html>
